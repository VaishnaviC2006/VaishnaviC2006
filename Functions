# Python Functions

def my_function():
    print("Hello from a function")
my_function()

# Arguments
def my_function(fname):
    print("Docter " + fname)
    print("Engineer " + fname)
my_function("Sanil")
my_function("Laddha")
my_function("Jay")

# Number of Arguments
def my_function(fname, mname, lname):
    print(fname + " " + mname + " " + lname)
my_function("Jay", "Ram", "Thakur")

def my_function(*kids):
    print("The youngest child is " + kids[0])
my_function("Abhisehek", "Ammar", "Sanskar")

# Keyword Arguments
def my_function(child3, child2, child1, child4):
    print("The Youngest child is " + child4)
my_function(child1="Ram", child2="Krishna", child3="Hari", child4="Kali Maa")

# Arbitrary Keyword Arguments
def my_function(**kid):
    print("His first name is " + kid["fname"])
    print("His last name is " + kid["lname"])
my_function(fname="Ram", lname="Thakur")

# Default Parameter Value
def my_function(country="India"):
    print("I am from " + country)
my_function("Brazil")
my_function("Norway")
my_function("USA")
my_function()

# Passing a List as Argument
def my_function(fruits, names):
    for x in fruits:
        print(x)
    for y in names:
        print(y)
fruits = ["Apple", "Banana", "Mango", "Pineapple"]
names = ["Jay", "Ammar", "Ritesh", "Sanskar"]
my_function(fruits, names)

# Pass by Reference vs Value
def testfunction(arg):
    print("Inside function:", arg)
    print("ID inside the function:", id(arg))
    arg.append(90)

var = [10, 20, 30, 40]
print("ID before passing:", id(var))
testfunction(var)
print("list after function call", var)

# Positional or Required Arguments
def printme(str):
    print(str)
printme("Hello World")

# Keyword Arguments
def printinfo(name, age):
    print("Name:", name)
    print("Age:", age)
printinfo(age=18, name="Jay")

# Default Arguments
def printinfo(name, age=18):
    print("Name:", name)
    print("Age:", age)
printinfo(age=27, name="Jay")
printinfo(name="Jay")

# Positional-only Arguments
def posFun(x, y, /, z):
    print("Evaluating positional-only arguments:")
    print(x + y + z)
posFun(33, 22, z=11)

# Keyword-only Arguments
def posFun(*, num1, num2, num3):
    print("Evaluating keyword-only arguments:")
    print(num1 * num2 * num3)
posFun(num3=6, num2=8, num1=5)

# Arbitrary or Variable-length Arguments
def printinfo(arg1, *vartuple):
    print("Output is:")
    print(arg1)
    for var in vartuple:
        print(var)
printinfo(10)
printinfo(70, 60, 50)

# Function with Return Value
def add(x, y):
    return x + y
a = 450
b = 570
result = add(a, b)
print("a = {} b = {} a+b = {}".format(a, b, result))

# Anonymous (lambda) Functions
sum = lambda arg1, arg2: arg1 + arg2
print("Value of total:", sum(32, 57))
print("Value of total:", sum(43, 67))

# Global vs Local Variables
total = 0
def sum(arg1, arg2):
    total = arg1 + arg2
    print("Inside the function local total:", total)
    return total
sum(10, 50)
print("Outside the function global total:", total)

# Return Values
def my_function(x):
    return 5 * x
print(my_function(3))
print(my_function(5))
print(my_function(9))

# Combine Positional-Only and Keyword-Only
def my_function(a, b, /, *, c, d):
    print(a + b + c + d)
my_function(4, 6, c=9, d=5)

# Recursion
def tri_recursion(k):
    if k > 0:
        result = k + tri_recursion(k - 1)
        print(result)
    else:
        result = 0
    return result
print("Recursion Example Results:")
tri_recursion(9)

# Python Lambda
x = lambda a: a + 10
print(x(5))
x = lambda a, b: a * b
print(x(8, 7))
x = lambda a, b, c: a + b + c
print(x(9, 4, 2))

# Lambda inside Function
def myfunc(n):
    return lambda a: a * n
mydoubler = myfunc(2)
mytripler = myfunc(3)
print(mydoubler(56))
print(mytripler(90))
